prelude: :gerbil/core
package: gerbil
namespace: gxc

(%#begin (%#import
          :gerbil/expander
          (spec: (:gerbil/gambit/misc) (0 pretty-print 0 pretty-print))
          (spec:
           (:gerbil/gambit/ports)
           (0 open-process 0 open-process)
           (0 process-status 0 process-status))
          (spec:
           (:gerbil/gambit/hvectors)
           (0 s32vector? 0 s32vector?)
           (0 f64vector? 0 f64vector?)
           (0 u16vector? 0 u16vector?)
           (0 s16vector? 0 s16vector?)
           (0 u64vector? 0 u64vector?)
           (0 u32vector? 0 u32vector?)
           (0 u8vector? 0 u8vector?)
           (0 s8vector? 0 s8vector?)
           (0 f32vector? 0 f32vector?)
           (0 s64vector? 0 s64vector?))
          (in: :gerbil/core <syntax-case>)
          (in: :gerbil/core <syntax-sugar>))
         (%#export (spec: 0 compile-file compile-file))
         (%#begin (%#begin-syntax
                   (%#call (%#ref _gx#load-module)
                           (%#quote "gerbil/compiler__1")))
                  (%#define-syntax ast-case |gxc[:0:]#ast-case|))
         (%#define-runtime
          current-compile-symbol-table
          gxc#current-compile-symbol-table)
         (%#define-runtime
          current-compile-runtime-sections
          gxc#current-compile-runtime-sections)
         (%#define-runtime
          current-compile-output-dir
          gxc#current-compile-output-dir)
         (%#define-runtime
          current-compile-invoke-gsc
          gxc#current-compile-invoke-gsc)
         (%#define-runtime
          current-compile-gsc-options
          gxc#current-compile-gsc-options)
         (%#define-runtime
          current-compile-keep-scm
          gxc#current-compile-keep-scm)
         (%#define-runtime current-compile-verbose gxc#current-compile-verbose)
         (%#define-runtime symbol-table::t gxc#symbol-table::t)
         (%#define-runtime symbol-table? gxc#symbol-table?)
         (%#define-runtime make-symbol-table gxc#make-symbol-table)
         (%#define-runtime symbol-table-gensyms gxc#symbol-table-gensyms)
         (%#define-runtime symbol-table-bindings gxc#symbol-table-bindings)
         (%#define-runtime
          symbol-table-gensyms-set!
          gxc#symbol-table-gensyms-set!)
         (%#define-runtime
          symbol-table-bindings-set!
          gxc#symbol-table-bindings-set!)
         (%#define-syntax symbol-table |gxc[:0:]#symbol-table|)
         (%#define-runtime symbol-table:::init! gxc#symbol-table:::init!)
         (%#define-runtime raise-compile-error gxc#raise-compile-error)
         (%#define-runtime verbose gxc#verbose)
         (%#define-runtime compile-file gxc#compile-file)
         (%#define-runtime compile-top-module gxc#compile-top-module)
         (%#define-runtime collect-bindings gxc#collect-bindings)
         (%#define-runtime compile-runtime-code gxc#compile-runtime-code)
         (%#define-runtime compile-meta-code gxc#compile-meta-code)
         (%#define-runtime generate-meta-code gxc#generate-meta-code)
         (%#define-runtime current-compile-lift gxc#current-compile-lift)
         (%#define-runtime generate-runtime-phi gxc#generate-runtime-phi)
         (%#define-runtime lift-nested-modules gxc#lift-nested-modules)
         (%#define-runtime compile-scm-file gxc#compile-scm-file)
         (%#define-runtime gsc-compile-file gxc#gsc-compile-file)
         (%#define-runtime compile-output-file gxc#compile-output-file)
         (%#define-runtime current-compile-methods gxc#current-compile-methods)
         (%#define-runtime compile-e gxc#compile-e)
         (%#define-syntax defcompile-method |gxc[:0:]#defcompile-method|)
         (%#define-runtime &void-expression gxc#&void-expression)
         (%#define-runtime &void-special-form gxc#&void-special-form)
         (%#define-runtime &void gxc#&void)
         (%#define-runtime &collect-bindings gxc#&collect-bindings)
         (%#define-runtime apply-collect-bindings gxc#apply-collect-bindings)
         (%#define-runtime &lift-modules gxc#&lift-modules)
         (%#define-runtime apply-lift-modules gxc#apply-lift-modules)
         (%#define-runtime &find-runtime-code gxc#&find-runtime-code)
         (%#define-runtime apply-find-runtime-code gxc#apply-find-runtime-code)
         (%#define-runtime &generate-loader gxc#&generate-loader)
         (%#define-runtime apply-generate-loader gxc#apply-generate-loader)
         (%#define-runtime &generate-runtime gxc#&generate-runtime)
         (%#define-runtime apply-generate-runtime gxc#apply-generate-runtime)
         (%#define-runtime &generate-runtime-phi gxc#&generate-runtime-phi)
         (%#define-runtime
          apply-generate-runtime-phi
          gxc#apply-generate-runtime-phi)
         (%#define-runtime
          &collect-expression-refs
          gxc#&collect-expression-refs)
         (%#define-runtime
          apply-collect-expression-refs
          gxc#apply-collect-expression-refs)
         (%#define-runtime &generate-meta gxc#&generate-meta)
         (%#define-runtime apply-generate-meta gxc#apply-generate-meta)
         (%#define-runtime &generate-meta-phi gxc#&generate-meta-phi)
         (%#define-runtime apply-generate-meta-phi gxc#apply-generate-meta-phi)
         (%#define-runtime collect-begin% gxc#collect-begin%)
         (%#define-runtime collect-begin-syntax% gxc#collect-begin-syntax%)
         (%#define-runtime collect-module% gxc#collect-module%)
         (%#define-runtime
          collect-bindings-define-values%
          gxc#collect-bindings-define-values%)
         (%#define-runtime
          collect-bindings-define-syntax%
          gxc#collect-bindings-define-syntax%)
         (%#define-runtime lift-modules-module% gxc#lift-modules-module%)
         (%#define-runtime add-module-binding! gxc#add-module-binding!)
         (%#define-runtime
          generate-runtime-binding-id
          gxc#generate-runtime-binding-id)
         (%#define-runtime
          generate-runtime-binding-id*
          gxc#generate-runtime-binding-id*)
         (%#define-runtime
          generate-runtime-gensym-reference
          gxc#generate-runtime-gensym-reference)
         (%#define-runtime
          generate-runtime-identifier
          gxc#generate-runtime-identifier)
         (%#define-runtime
          generate-runtime-identifier-key
          gxc#generate-runtime-identifier-key)
         (%#define-runtime
          generate-runtime-temporary
          gxc#generate-runtime-temporary)
         (%#define-runtime generate-runtime-empty gxc#generate-runtime-empty)
         (%#define-runtime generate-runtime-begin% gxc#generate-runtime-begin%)
         (%#define-runtime
          generate-runtime-begin-foreign%
          gxc#generate-runtime-begin-foreign%)
         (%#define-runtime
          generate-runtime-declare%
          gxc#generate-runtime-declare%)
         (%#define-runtime
          generate-runtime-define-values%
          gxc#generate-runtime-define-values%)
         (%#define-runtime
          generate-runtime-check-values
          gxc#generate-runtime-check-values)
         (%#define-runtime
          generate-runtime-lambda%
          gxc#generate-runtime-lambda%)
         (%#define-runtime
          generate-runtime-lambda-head
          gxc#generate-runtime-lambda-head)
         (%#define-runtime
          generate-runtime-case-lambda%
          gxc#generate-runtime-case-lambda%)
         (%#define-runtime
          generate-runtime-let-values%
          gxc#generate-runtime-let-values%)
         (%#define-runtime
          generate-runtime-let-values-bind
          gxc#generate-runtime-let-values-bind)
         (%#define-runtime
          generate-runtime-letrec-values%
          gxc#generate-runtime-letrec-values%)
         (%#define-runtime
          generate-runtime-letrec*-values%
          gxc#generate-runtime-letrec*-values%)
         (%#define-runtime
          generate-runtime-simple-let?
          gxc#generate-runtime-simple-let?)
         (%#define-runtime
          generate-runtime-simple-let
          gxc#generate-runtime-simple-let)
         (%#define-runtime generate-runtime-quote% gxc#generate-runtime-quote%)
         (%#define-runtime generate-runtime-call% gxc#generate-runtime-call%)
         (%#define-runtime generate-runtime-if% gxc#generate-runtime-if%)
         (%#define-runtime generate-runtime-ref% gxc#generate-runtime-ref%)
         (%#define-runtime generate-runtime-setq% gxc#generate-runtime-setq%)
         (%#define-runtime
          generate-runtime-loader-import%
          gxc#generate-runtime-loader-import%)
         (%#define-runtime
          generate-runtime-phi-quote-syntax%
          gxc#generate-runtime-phi-quote-syntax%)
         (%#define-runtime
          generate-runtime-phi-define-runtime%
          gxc#generate-runtime-phi-define-runtime%)
         (%#define-runtime generate-meta-begin% gxc#generate-meta-begin%)
         (%#define-runtime
          generate-meta-begin-syntax%
          gxc#generate-meta-begin-syntax%)
         (%#define-runtime generate-meta-module% gxc#generate-meta-module%)
         (%#define-runtime
          generate-meta-import-path
          gxc#generate-meta-import-path)
         (%#define-runtime current-context-chain gxc#current-context-chain)
         (%#define-runtime generate-meta-import% gxc#generate-meta-import%)
         (%#define-runtime generate-meta-export% gxc#generate-meta-export%)
         (%#define-runtime generate-meta-provide% gxc#generate-meta-provide%)
         (%#define-runtime generate-meta-extern% gxc#generate-meta-extern%)
         (%#define-runtime
          generate-meta-define-values%
          gxc#generate-meta-define-values%)
         (%#define-runtime
          generate-meta-define-syntax%
          gxc#generate-meta-define-syntax%)
         (%#define-runtime
          generate-meta-define-alias%
          gxc#generate-meta-define-alias%)
         (%#define-runtime
          generate-meta-phi-define-values%
          gxc#generate-meta-phi-define-values%)
         (%#define-runtime generate-meta-phi-expr gxc#generate-meta-phi-expr)
         (%#define-runtime meta-state::t gxc#meta-state::t)
         (%#define-runtime meta-state? gxc#meta-state?)
         (%#define-runtime make-meta-state gxc#make-meta-state)
         (%#define-runtime meta-state-src gxc#meta-state-src)
         (%#define-runtime meta-state-n gxc#meta-state-n)
         (%#define-runtime meta-state-open gxc#meta-state-open)
         (%#define-runtime meta-state-blocks gxc#meta-state-blocks)
         (%#define-runtime meta-state-src-set! gxc#meta-state-src-set!)
         (%#define-runtime meta-state-n-set! gxc#meta-state-n-set!)
         (%#define-runtime meta-state-open-set! gxc#meta-state-open-set!)
         (%#define-runtime meta-state-blocks-set! gxc#meta-state-blocks-set!)
         (%#define-syntax meta-state |gxc[:0:]#meta-state|)
         (%#define-runtime meta-state:::init! gxc#meta-state:::init!)
         (%#define-runtime meta-state-block::t gxc#meta-state-block::t)
         (%#define-runtime meta-state-block? gxc#meta-state-block?)
         (%#define-runtime make-meta-state-block gxc#make-meta-state-block)
         (%#define-runtime meta-state-block-ctx gxc#meta-state-block-ctx)
         (%#define-runtime meta-state-block-phi gxc#meta-state-block-phi)
         (%#define-runtime meta-state-block-n gxc#meta-state-block-n)
         (%#define-runtime meta-state-block-code gxc#meta-state-block-code)
         (%#define-runtime
          meta-state-block-ctx-set!
          gxc#meta-state-block-ctx-set!)
         (%#define-runtime
          meta-state-block-phi-set!
          gxc#meta-state-block-phi-set!)
         (%#define-runtime meta-state-block-n-set! gxc#meta-state-block-n-set!)
         (%#define-runtime
          meta-state-block-code-set!
          gxc#meta-state-block-code-set!)
         (%#define-syntax meta-state-block |gxc[:0:]#meta-state-block|)
         (%#define-runtime meta-state-begin-phi! gxc#meta-state-begin-phi!)
         (%#define-runtime meta-state-add-phi! gxc#meta-state-add-phi!)
         (%#define-runtime meta-state-end-phi! gxc#meta-state-end-phi!)
         (%#define-runtime meta-state-end! gxc#meta-state-end!)
         (%#define-runtime collect-expression-refs gxc#collect-expression-refs)
         (%#define-runtime collect-refs-lambda% gxc#collect-refs-lambda%)
         (%#define-runtime
          collect-refs-case-lambda%
          gxc#collect-refs-case-lambda%)
         (%#define-runtime
          collect-refs-let-values%
          gxc#collect-refs-let-values%)
         (%#define-runtime collect-refs-ref% gxc#collect-refs-ref%)
         (%#define-runtime collect-refs-setq% gxc#collect-refs-setq%)
         (%#define-runtime find-runtime-begin% gxc#find-runtime-begin%))
(%#call (%#ref _gx#load-module) (%#quote "gerbil/compiler__0"))
