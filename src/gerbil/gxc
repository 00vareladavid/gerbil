#!/usr/bin/env gxi-script
;; -*- Gerbil -*-

(import :gerbil/compiler)

(def (parse-args args)
  (def outdir (path-expand "lib" (getenv "GERBIL_HOME")))
  (def invoke-gsc #t)
  (def keep-scm #f)
  (def verbose #f)
  (def optimize #f)
  (def generate-ssxi #t) ; enable by default (only when optimizing)
  (def gsc-options #f)
  (def compile-exe #f)
  (def outfile #f)

  (def (add-gsc-option! opt)
    (set! gsc-options
      (if gsc-options
        (append gsc-options opt)
        opt)))
  
  (def (make-opts)
    [invoke-gsc: invoke-gsc 
     keep-scm: keep-scm 
     verbose: verbose
     optimize: optimize
     generate-ssxi: generate-ssxi
     gsc-options: gsc-options
     output-dir: outdir
     output-file: outfile])
  
  (let lp ((rest args))
    (match rest
      ([arg . rest]
       (case arg
         (("-d")
          (match rest
            ([dir . rest]
             (set! outdir dir)
             (lp rest))))
         (("-S")
          (set! invoke-gsc #f)
          (lp rest))
         (("-s")
          (set! keep-scm #t)
          (lp rest))
         (("-g")
          (set! keep-scm #t)
          (add-gsc-option! ["-debug"])
          (lp rest))
         (("-v")
          (set! verbose #t)
          (lp rest))
         (("-O")
          (set! optimize #t)
          (lp rest))
         (("-no-ssxi")
          (set! generate-ssxi #f)
          (lp rest))
         (("-exe")
          (set! compile-exe #t)
          (lp rest))
         (("-o")
          (match rest
            ([file . rest]
             (set! outfile file)
             (lp rest))))
         (("-cc-options")
          (match rest
            ([opt . rest]
             (add-gsc-option! ["-cc-options" opt])
             (lp rest))))
         (("-ld-options")
          (match rest
            ([opt . rest]
             (add-gsc-option! ["-ld-options" opt])
             (lp rest))))
         (else
          (if (and (not (string-empty? arg))
                   (eq? (string-ref arg 0) #\-))
            (error "Unexpected option" arg)
            (values compile-exe (make-opts) (cons arg rest))))))
      (else
       (values (make-opts) args)))))

(def (compile-exe file opts)
  (compile-file file opts)
  (compile-exe-stub file opts))

(def (main . args)
  (let* (((values compile-exe? opts files) (parse-args args))
         (compile-e (if compile-exe? compile-exe compile-file)))
    (for-each (cut compile-e <> opts) 
              (filter (? (not string-empty?)) files))))
